library(readxl)
library(tidyr)
library(dplyr)
library(tidyverse)
library(readr)
library(plotly)
library(corrplot)
library(ggplot2)
# 1. Загрузка датасетов
bank_full <- read_csv2("bank-full.csv", )
View(bank_full)
deposits_tariff <- read_csv2("deposits-tariff.csv")
View(deposits_tariff)
summary(bank_full)
#Посмотрим на выбросы:
boxplot(bank_full$age) # Есть несколько отрицательных значений возраста
#Удалим отрицательный возраст и отрицательный среднемесячный баланс:
bank_full_clean <- filter(bank_full, age > 0, balance > 0)
summary(bank_full_clean) #пропусков в числовых данных нет
for (i in 1:nrow(bank_full_clean)) {
x <- 'no deposit'
bank_full_clean[i,19] <- ifelse(is.na(bank_full_clean[i,19]), x, bank_full_clean[i,19])
}
bank_and_deposits <- left_join(bank_full_clean, deposits_tariff, by = 'deposittype')
result_marketing_percent <- bank_and_deposits %>% select(deposittype) %>% group_by(deposittype) %>%
summarise(count = n()) %>% mutate(percent = round((count / 45203) * 100, 1))
ggplotly(ggplot(data = result_marketing_percent, mapping = aes(x = deposittype , y = count)) + geom_col() +
xlab("Тип депозита") + ylab("Количество выданных депозитов") +
theme_light())
# Сколько процентов коммуникаций приводит к успеху:
result_marketing_percent2 <- filter(result_marketing_percent, deposittype != 'no deposit')
successful_communications <- round((sum(result_marketing_percent2$count)/nrow(bank_full_clean)) * 100, 1)
successful_communications
#Успешная коммуникация
result1 <- filter(bank_full_clean, deposittype != 'no deposit')
mean(result1$duration) #Средняя длительность успешной коммуникации 524с.
round(mean(result1$duration) / 60, 0)
count_successful_communications <- round(mean(result1$campaign), 0)
count_successful_communications
#Неуспешная коммуникация
result2 <- filter(bank_full_clean, deposittype == 'no deposit')
mean(result2$duration) #Средняя длительность ytуспешной коммуникации 221 с.
round(mean(result2$duration) / 60, 0)
count_unsuccessful_communications <- round(mean(result2$campaign), 0)
count_unsuccessful_communications
for_calculation <- filter(bank_and_deposits, deposittype != 'no deposit') %>% select(balance, deposittype, drate, duration = duration.y, minbalance, replenishable, withdrawal)
for_calculation2 <- for_calculation
# Преобразуем минимальный балас в числовые переменные
for_calculation2 <- for_calculation2 %>% mutate(minbalance = (ifelse(for_calculation2$minbalance == "1 000,00", 1000, ifelse(for_calculation2$minbalance == "5 000,00", 5000, 500))))
for_calculation2 <- for_calculation2 %>% mutate(contribution = 0) # добавим столбец со значением первоначального взноса
for (i in 1:nrow(for_calculation2)) {
x <- for_calculation2[i,5]  + (for_calculation2[i,1]  * 0.1)
for_calculation2[i,8] <- ifelse(for_calculation2[i,1] > for_calculation2[i, 5], x, for_calculation2[i, 5])
}
View(for_calculation2)
# Рассчитаем расходы по по депозиту (добавим столбцы, куда будем записывать промежуточные результаты)
for_calculation3 <-  for_calculation2 %>% mutate(deposit_month = 0, consumption = 0)
summary(for_calculation3)
unique(is.na(for_calculation3$duration))
for (i in 1:nrow(for_calculation3)) { # для каждой строчки
for_calculation3[i, 9] <- for_calculation3[i, 8] # в отдельном столбце будет перезаписываться сумма на депозите по каждому месяцу
for (j in 1:for_calculation3[i, 4]) { # для каждого месяца
for_calculation3$consumption <- for_calculation3$consumption + (for_calculation3$deposit_month * (for_calculation3$drate / 12)) # расход по %
# Если есть снятие, то сумма на депозите будет складываться из текущей суммы на депозите - 0,5% от остатка
ifelse(for_calculation3$withdrawal == "yes",
for_calculation3$deposit_month <- for_calculation3$deposit_month - ((for_calculation3$deposit_month - for_calculation3$minbalance) * 0.005),
for_calculation3$deposit_month <- for_calculation3$deposit_month + for_calculation3$consumption) #иначе сумма + проценты
# если есть пополнение, то сумма на депозите будет складываться из текущей суммы на депозите + 5% от остатка
ifelse(for_calculation3$replenishable == "yes",
for_calculation3$deposit_month <- for_calculation3$deposit_month + ((for_calculation3$deposit_month - for_calculation3$minbalance) * 0.05),
for_calculation3$deposit_month <- for_calculation3$deposit_month + for_calculation3$consumption) #иначе сумма + проценты
}
}
max_count_ages <- filter(bank_and_deposits, deposittype != 'no deposit') %>% group_by(age) %>% summarise(counts = n()) %>% filter(counts == max(counts))
max_count_ages[1, 1] #возвраст клиента
# посмотрим профессию:
max_count_job <- filter(bank_and_deposits, deposittype != 'no deposit') %>% group_by(job) %>% summarise(counts = n()) %>% filter(counts == max(counts))
max_count_job[1, 1] #Профессия клиента
# Посмотрим семейное положение:
max_count_marital <- filter(bank_and_deposits, deposittype != 'no deposit') %>% group_by(marital) %>% summarise(counts = n()) %>% filter(counts == max(counts))
max_count_marital[1, 1] #семейное положение клиента
#Посмотрим образование
max_count_education <- filter(bank_and_deposits, deposittype != 'no deposit') %>% group_by(education) %>% summarise(counts = n()) %>% filter(counts == max(counts))
max_count_education[1,1]
bank_and_deposits_cor <- select(bank_and_deposits, default, housing, loan, salary, y)
bank_and_deposits_cor1 <- bank_and_deposits_cor
bank_and_deposits_cor1 <- bank_and_deposits_cor1 %>% mutate(default = ifelse(default == 'yes', 1, 0)) %>%
mutate(housing = ifelse(housing == 'yes', 1, 0)) %>%
mutate(loan = ifelse(loan == 'yes', 1, 0)) %>%
mutate(salary = ifelse(salary == 'yes', 1, 0)) %>%
mutate(y = ifelse(y == 'yes', 1,0))
corrMatr <- cor(bank_and_deposits_cor1)
# Посмотри корреляцию между параметрами. Нормализовать переменную не нужно, т.к. у нас значения 1 и 0.
corrplot(corrMatr, method = 'color', type = 'upper')
